<?php
include ('../../../inc/includes.php'); // Inclure les fichiers nécessaires de GLPI
require_once('../vendor/autoload.php'); // Utiliser le chargement automatique de Composer

require_once '../inc/SharePointGraph.php';

global $DB, $CFG_GLPI;

use setasign\Fpdi\Fpdi;
use setasign\Fpdi\PdfParser\StreamReader;

$sharepoint = new PluginGestionSharepoint();
$config = new PluginGestionConfig();

function message($msg, $msgtype){
    Session::addMessageAfterRedirect(
        __($msg, 'gestion'),
        true,
        $msgtype
    );
}

$signatureBase64 = $_POST['url'] ?? ''; // Assurez-vous que la variable est définie
$DOC_NAME = $_POST['DOC'];
$NAME = $_POST['name'];

// Générer un nombre entier aléatoire entre 1 et 100
$nombreAleatoire = rand(1, 100000);

$DOC = $DB->query("SELECT * FROM `glpi_plugin_gestion_tickets` WHERE bl = '$DOC_NAME'")->fetch_object();
$DOC_FILES = $DB->query("SELECT * FROM `glpi_documents` WHERE id = $DOC->doc_id")->fetch_object();

// Retirer le préfixe de type MIME, s’il est présent
if (strpos($signatureBase64, 'data:image/png;base64,') === 0) {
    $signatureBase64 = str_replace('data:image/png;base64,', '', $signatureBase64);
}

// Décoder l’image
$signatureData = base64_decode($signatureBase64);
if ($signatureData === false) {
    message("Erreur lors du décodage de l'image.", ERROR);
}

// Sauvegarder l'image décodée
$signaturePath = '../FilesTempSharePoint/signature'.$nombreAleatoire.'.png';
if (file_put_contents($signaturePath, $signatureData) === false) {
    message("Échec de la sauvegarde de l'image de signature.", ERROR);
}

if ($config->fields['ConfigModes'] == 0){
    $originalPath = $DOC_FILES->filepath;
    $modifiedPath = str_replace('_plugins', '', $originalPath);

    // Vérifiez que le PDF source existe
    $existingPdfPath = GLPI_PLUGIN_DOC_DIR . $modifiedPath;
    if (!file_exists($existingPdfPath)) {
        message("Le fichier PDF source n'existe pas.", ERROR);
        Html::back();
        exit;
    }
}elseif ($config->fields['ConfigModes'] == 1){ // CONFIG SHAREPOINT 

    try {
        $accessToken = $sharepoint->getAccessToken($config->TenantID(), $config->ClientID(), $config->ClientSecret());
        $siteId = '';
        $siteId = $sharepoint->getSiteId($accessToken, $config->Hostname(), $config->SitePath());
        $drives = $sharepoint->getDrives($accessToken, $siteId);

        // Trouver la bibliothèque "Documents partagés"
        $globaldrive = strtolower(trim($config->Global()));
        $driveId = null;
        foreach ($drives as $drive) {
            if (strtolower($drive['name']) === $globaldrive) {
                $driveId = $drive['id'];
                break;
            }
        }

        if (!$driveId) {
            Session::addMessageAfterRedirect(__("Bibliothèque '$globaldrive' introuvable.", 'gestion'), false, ERROR);
        }

        // Étape 3 : Définir le chemin relatif du fichier
        $filePath = "BL_NON_SIGNE/".$DOC_NAME.".pdf";

        // Étape 4 : Obtenir l'URL de téléchargement
        $downloadUrl = $sharepoint->getDownloadUrl($accessToken, $driveId, $filePath);

        // Étape 5 : Télécharger le fichier depuis l'URL
        $destinationPath = "../FilesTempSharePoint/SharePoint_Temp_".$nombreAleatoire.".pdf";
        $sharepoint->downloadFileFromUrl($downloadUrl, $destinationPath);
    } catch (Exception $e) {
        message("Erreur : " . $e->getMessage(), ERROR);
    }

    // Vérifiez que le PDF source existe
    $existingPdfPath = "../FilesTempSharePoint/SharePoint_Temp_".$nombreAleatoire.".pdf";;
    if (!file_exists($existingPdfPath)) {
        message("Le fichier PDF source n'existe pas.", ERROR);
        Html::back();
        exit;
    }
}

// Créer un nouvel objet FPDI / ajouter signature
$pdf = new FPDI();
try {
    $stream = StreamReader::createByFile($existingPdfPath);
    $pageCount = $pdf->setSourceFile($stream);
    $targetPage = $pageCount > 1 ? $pageCount : 1; // Utilisez la dernière page si plusieurs pages, sinon la première

    for ($i = 1; $i <= $pageCount; $i++) {
        $pdf->AddPage();
        $tplIdx = $pdf->importPage($i);
        $pdf->useTemplate($tplIdx, 0, 0);

        // Si c'est la page cible, ajoutez la signature
        if ($i === $targetPage) {
            // Ajouter la signature en bas à gauche
            $pdf->Image($signaturePath, 36, $pdf->GetPageHeight() - 44, 50); // Ajustez la position et la taille

            // Ajouter le nom et la date
            $pdf->SetFont('Arial', '', 10);
            $pdf->SetXY(20, $pdf->GetPageHeight() - 56.5); // Position pour "Nom"
            $pdf->Cell(40, 10, $NAME);

            $pdf->SetXY(20, $pdf->GetPageHeight() - 51.3); // Position pour "Date"
            $pdf->Cell(40, 10, date('d/m/Y'));

            $tech = getUserName(Session::getLoginUserID());
            $pdf->SetFont('Arial', '', 12);
            $pdf->SetXY(150, $pdf->GetPageHeight() - 37); // Position pour "Nom"
            $pdf->Cell(40, 10, $tech);
        }
    }
} catch (Exception $e) {
    message("Erreur lors de l'importation du fichier PDF : " . $e->getMessage(), ERROR);
}

// Récupérer la photo encodée en base64
$photoBase64 = $_POST['photo_base64'] ?? '';

if (!empty($photoBase64) && strpos($photoBase64, 'data:image') === 0) {
    // Retirer le préfixe de type MIME
    $photoBase64 = preg_replace('#^data:image/\w+;base64,#i', '', $photoBase64);
    $photoData = base64_decode($photoBase64);

    if ($photoData === false) {
        message("Erreur lors du décodage de l'image.", ERROR);
    }

    // Enregistrer temporairement l'image décodée sous forme brute
    $tempPath = 'temp_photo';
    if (file_put_contents($tempPath, $photoData) === false) {
        message("Erreur lors de la sauvegarde de l'image de la photo.", ERROR);
    }

    // Déterminer le type de l'image (PNG ou JPEG) et convertir si nécessaire
    $imageInfo = getimagesize($tempPath);
    if ($imageInfo === false) {
        unlink($tempPath); // Supprimer le fichier temporaire
        message("Le fichier image n'est pas valide.", ERROR);
    }

    $photoPath = 'photo_capture.png'; // Le chemin final de l'image en PNG

    // Si l'image est au format JPEG, la convertir en PNG et corriger l'orientation
    if ($imageInfo['mime'] === 'image/jpeg') {
        $image = imagecreatefromjpeg($tempPath);
        if ($image === false) {
            unlink($tempPath);
            message("Erreur lors de la création de l'image JPEG.", ERROR);
        }

        // Corriger l'orientation de l'image à l'aide des métadonnées EXIF
        $exif = exif_read_data($tempPath);
        if (!empty($exif['Orientation'])) {
            switch ($exif['Orientation']) {
                case 3:
                    $image = imagerotate($image, 180, 0);
                    break;
                case 6:
                    $image = imagerotate($image, -90, 0);
                    break;
                case 8:
                    $image = imagerotate($image, 90, 0);
                    break;
            }
        }

        if (!imagepng($image, $photoPath)) {
            imagedestroy($image);
            unlink($tempPath);
            message("Erreur lors de la conversion de l'image JPEG en PNG.", ERROR);
        }
        imagedestroy($image);
    } elseif ($imageInfo['mime'] === 'image/png') {
        // Si l'image est déjà un PNG, on la copie simplement
        if (!rename($tempPath, $photoPath)) {
            unlink($tempPath);
            message("Erreur lors de la sauvegarde de l'image PNG.", ERROR);
        }
    } else {
        unlink($tempPath);
        message("Type d'image non pris en charge.", ERROR);
    }

    // Ajouter une nouvelle page pour la photo dans le PDF
    $pdf->AddPage();
    $pdf->Image($photoPath, 10, 10, 180); // Positionner la photo pour remplir la majorité de la page
    unlink($photoPath); // Supprimer l'image temporaire
}

// Sauvegarder le PDF modifié avec la signature ajoutée
$outputPath = GLPI_PLUGIN_DOC_DIR . "/gestion/signed/" . $DOC_NAME . ".pdf";
if ($pdf->Output('F', $outputPath) === '') {
    $date = date('Y-m-d H:i:s'); // Format : 2024-11-02 14:30:45
    $tech_id = Session::getLoginUserID();
    $DB->query("UPDATE glpi_plugin_gestion_tickets SET signed = 1,date_creation = '$date', users_id = $tech_id, users_ext = '$NAME' WHERE BL = '$DOC_NAME'");
    $savepath = "_plugins/gestion/signed/" . $DOC_NAME . ".pdf";
    if ($DB->query("UPDATE glpi_documents SET filepath = '$savepath' WHERE id = $DOC_FILES->id")){
        //unlink($existingPdfPath);
        unlink($signaturePath);
    }
    message('Documents : '. $DOC_NAME.' signé', INFO);
}else{
    message("Erreur lors de la signature et/ou de l'enregistrement du documents : ". $DOC_NAME, ERROR);
}

//Html::back();
?>
